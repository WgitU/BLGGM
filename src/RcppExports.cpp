// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MCMC_full
List MCMC_full(const int num_iter, const int num_save, arma::mat theta_t, arma::mat ind_zero, arma::mat mu_t, arma::cube invcov_t, arma::cube cov_t, arma::cube edge_t, arma::vec group_t, arma::vec lambda0_t, arma::vec lambda1_t, arma::vec pi_t, arma::vec gam, const int G, const int N, const int K, double ssp_v0, const double ssp_v1, const double ssp_l, double ssp_pi, double epsilon_theta, int num_step_theta, double eta_mu, double tau_sq_mu, double lam0_0, double lam1_0, double sigma2_lam0, double sigma2_lam1, double epsilon_lam, int num_step_lam, bool iter_save, int n_threads, int iter_print, bool class_print);
RcppExport SEXP _BLGGM_MCMC_full(SEXP num_iterSEXP, SEXP num_saveSEXP, SEXP theta_tSEXP, SEXP ind_zeroSEXP, SEXP mu_tSEXP, SEXP invcov_tSEXP, SEXP cov_tSEXP, SEXP edge_tSEXP, SEXP group_tSEXP, SEXP lambda0_tSEXP, SEXP lambda1_tSEXP, SEXP pi_tSEXP, SEXP gamSEXP, SEXP GSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ssp_v0SEXP, SEXP ssp_v1SEXP, SEXP ssp_lSEXP, SEXP ssp_piSEXP, SEXP epsilon_thetaSEXP, SEXP num_step_thetaSEXP, SEXP eta_muSEXP, SEXP tau_sq_muSEXP, SEXP lam0_0SEXP, SEXP lam1_0SEXP, SEXP sigma2_lam0SEXP, SEXP sigma2_lam1SEXP, SEXP epsilon_lamSEXP, SEXP num_step_lamSEXP, SEXP iter_saveSEXP, SEXP n_threadsSEXP, SEXP iter_printSEXP, SEXP class_printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type num_save(num_saveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta_t(theta_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ind_zero(ind_zeroSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_t(mu_tSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type invcov_t(invcov_tSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type cov_t(cov_tSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type edge_t(edge_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type group_t(group_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda0_t(lambda0_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1_t(lambda1_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi_t(pi_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type ssp_v0(ssp_v0SEXP);
    Rcpp::traits::input_parameter< const double >::type ssp_v1(ssp_v1SEXP);
    Rcpp::traits::input_parameter< const double >::type ssp_l(ssp_lSEXP);
    Rcpp::traits::input_parameter< double >::type ssp_pi(ssp_piSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_theta(epsilon_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type num_step_theta(num_step_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type eta_mu(eta_muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq_mu(tau_sq_muSEXP);
    Rcpp::traits::input_parameter< double >::type lam0_0(lam0_0SEXP);
    Rcpp::traits::input_parameter< double >::type lam1_0(lam1_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lam0(sigma2_lam0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lam1(sigma2_lam1SEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lam(epsilon_lamSEXP);
    Rcpp::traits::input_parameter< int >::type num_step_lam(num_step_lamSEXP);
    Rcpp::traits::input_parameter< bool >::type iter_save(iter_saveSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type iter_print(iter_printSEXP);
    Rcpp::traits::input_parameter< bool >::type class_print(class_printSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_full(num_iter, num_save, theta_t, ind_zero, mu_t, invcov_t, cov_t, edge_t, group_t, lambda0_t, lambda1_t, pi_t, gam, G, N, K, ssp_v0, ssp_v1, ssp_l, ssp_pi, epsilon_theta, num_step_theta, eta_mu, tau_sq_mu, lam0_0, lam1_0, sigma2_lam0, sigma2_lam1, epsilon_lam, num_step_lam, iter_save, n_threads, iter_print, class_print));
    return rcpp_result_gen;
END_RCPP
}
// update_pi_R
arma::vec update_pi_R(arma::vec group_t, arma::vec gam, int K);
RcppExport SEXP _BLGGM_update_pi_R(SEXP group_tSEXP, SEXP gamSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type group_t(group_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pi_R(group_t, gam, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BLGGM_MCMC_full", (DL_FUNC) &_BLGGM_MCMC_full, 34},
    {"_BLGGM_update_pi_R", (DL_FUNC) &_BLGGM_update_pi_R, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BLGGM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
